import base64 
exec (base64.b64decode(b'aW1wb3J0IHRsc19jbGllbnQKZnJvbSBjb2xvcmFtYSBpbXBvcnQgaW5pdCxGb3JlLEJhY2sKaW1wb3J0IGZhZGUKaW1wb3J0IHJhbmRvbQppbXBvcnQgc3RyaW5nCmltcG9ydCB0aHJlYWRpbmcKaW1wb3J0IG9zCmltcG9ydCBjdHlwZXMKCiMgQ09ORklHICMKVVNFUk5BTUVfR0VORVJBVElPTl9NRVRIT0QgPSAiUkFORE9NIiAjIERJQ1RJT05BUlkgLCBSQU5ET00KUkFORE9NX01FVEhPRF9MRU5HVEggPSAzICMgRk9SIFJBTkRPTSBPUFRJT04KUkFORE9NX01FVEhPRF9XSEFUVVNFID0gIkFMTCIgIyBBTEwgLCBTVFJJTkcgLCBOVU1CRVIKCkRJQ1RJT05BUllfQVBJID0gImh0dHBzOi8vcmFuZG9tLXdvcmQtYXBpLmhlcm9rdWFwcC5jb20vd29yZCIKVEhSRUFEUyA9IDI1MAojIENPTkZJRyAjCgppbml0KCkKc2Vzc2lvbiA9IHRsc19jbGllbnQuU2Vzc2lvbihjbGllbnRfaWRlbnRpZmllcj0iY2hyb21lXzExNSIsIHJhbmRvbV90bHNfZXh0ZW5zaW9uX29yZGVyPVRydWUpCndpdGggb3BlbigncHJveGllcy50eHQnLCAncicpIGFzIGZpbGU6CiAgICBwcm94aWVzID0gW2xpbmUuc3RyaXAoKSBmb3IgbGluZSBpbiBmaWxlXQogICAgZmlsZS5jbG9zZSgpCndpdGggb3BlbigndG9rZW5zLnR4dCcsICdyJykgYXMgZmlsZToKICAgIHRva2VucyA9IFtsaW5lLnN0cmlwKCkgZm9yIGxpbmUgaW4gZmlsZV0KICAgIGZpbGUuY2xvc2UoKQoKY2xhc3Mgc3RhdHM6CiAgICBjaGVja2VkID0gMAogICAgdGFrZW4gPSAwCiAgICBzbmlwZWQgPSAwCmRlZiB1cGRhdGV0aXRsZSgpOgogICAgd2hpbGUgVHJ1ZToKICAgICAgICBjdHlwZXMud2luZGxsLmtlcm5lbDMyLlNldENvbnNvbGVUaXRsZVcoZiJTbWFydCBOaWNrbmFtZSBTbmlwZXIgLSBDaGVja2VkOiB7c3RhdHMuY2hlY2tlZH0gfCBUYWtlbjoge3N0YXRzLnRha2VufSB8IFNuaXBlZDoge3N0YXRzLnNuaXBlZH0iKQp0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD11cGRhdGV0aXRsZSkuc3RhcnQoKQoKZGVmIGNoZWNrVXNlcm5hbWUoKToKICAgIHVzZXJuYW1lID0gZ2VuZXJhdGVVc2VybmFtZSgpCiAgICB1cmwgPSAiaHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvdjkvdW5pcXVlLXVzZXJuYW1lL3VzZXJuYW1lLWF0dGVtcHQtdW5hdXRoZWQiICNodHRwczovL2Rpc2NvcmQuY29tL2FwaS92OS91c2Vycy9AbWUvcG9tZWxvLWF0dGVtcHQKICAgIGhlYWRlcnMgPSB7CiAgICAgICAgICAgICAgICAiYXV0aG9yaXR5IjogImRpc2NvcmQuY29tIiwKICAgICAgICAgICAgICAgICJhY2NlcHQiOiAiKi8qIiwKICAgICAgICAgICAgICAgICJhY2NlcHQtbGFuZ3VhZ2UiOiAiZW4tVVMsZW47cT0wLjkiLAogICAgICAgICAgICAgICAgIyJhdXRob3JpemF0aW9uIjogcmFuZG9tLmNob2ljZSh0b2tlbnMpLAogICAgICAgICAgICAgICAgImNhY2hlLWNvbnRyb2wiOiAibm8tY2FjaGUiLAogICAgICAgICAgICAgICAgImNvbnRlbnQtdHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgICAgICAgICAgICJjb29raWUiOiAiX19kY2ZkdWlkPTY3NmUwNmIwNTY1YjExZWQ5MGY5ZDkwMTM2ZTAzOTZiOyBfX3NkY2ZkdWlkPTY3NmUwNmIxNTY1YjExZWQ5MGY5ZDkwMTM2ZTAzOTZiYzI4ZGZkNDUxYmViYWIwMzQ1YjA5OTllOTQyODg2ZDhkZmQ3YjkwZjE5MzcyOTA0MmRkM2I2MmUyYjEzODEyZjsgX19jZnJ1aWQ9MWNlZmVjN2U5YzUwNGI0NTNjM2Y3MTExZWJjNDk0MGM1YTkyZGQwOC0xNjY2OTE4NjA5OyBsb2NhbGU9ZW4tVVMiLAogICAgICAgICAgICAgICAgIm9yaWdpbiI6ICJodHRwczovL2Rpc2NvcmQuY29tIiwKICAgICAgICAgICAgICAgICJwcmFnbWEiOiAibm8tY2FjaGUiLAogICAgICAgICAgICAgICAgInJlZmVyZXIiOiAiaHR0cHM6Ly9kaXNjb3JkLmNvbS9jaGFubmVscy9AbWUiLAogICAgICAgICAgICAgICAgInNlYy1jaC11YSI6IGYnIkdvb2dsZSBDaHJvbWUiO3Y9IjExNSIsICJDaHJvbWl1bSI7dj0iMTE1IiwgIk5vdD1BP0JyYW5kIjt2PSIyNCInLAogICAgICAgICAgICAgICAgInNlYy1jaC11YS1tb2JpbGUiOiAiPzAiLAogICAgICAgICAgICAgICAgInNlYy1jaC11YS1wbGF0Zm9ybSI6ICciV2luZG93cyInLAogICAgICAgICAgICAgICAgInNlYy1mZXRjaC1kZXN0IjogImVtcHR5IiwKICAgICAgICAgICAgICAgICJzZWMtZmV0Y2gtbW9kZSI6ICJjb3JzIiwKICAgICAgICAgICAgICAgICJzZWMtZmV0Y2gtc2l0ZSI6ICJzYW1lLW9yaWdpbiIsCiAgICAgICAgICAgICAgICAidXNlci1hZ2VudCI6IGYiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzExNSBTYWZhcmkvNTM3LjM2IiwKICAgICAgICAgICAgICAgICJ4LWRlYnVnLW9wdGlvbnMiOiAiYnVnUmVwb3J0ZXJFbmFibGVkIiwKICAgICAgICAgICAgICAgICJ4LWRpc2NvcmQtbG9jYWxlIjogImVuLVVTIiwKICAgICAgICAgICAgICAgICJ4LXN1cGVyLXByb3BlcnRpZXMiOiAiZXlKdmN5STZJbGRwYm1SdmQzTWlMQ0ppY205M2MyVnlJam9pUTJoeWIyMWxJaXdpWkdWMmFXTmxJam9pSWl3aWMzbHpkR1Z0WDJ4dlkyRnNaU0k2SW1WdUxWVlRJaXdpWW5KdmQzTmxjbDkxYzJWeVgyRm5aVzUwSWpvaVRXOTZhV3hzWVM4MUxqQWdLRmRwYm1SdmQzTWdUbFFnTVRBdU1Ec2dWMmx1TmpRN0lIZzJOQ2tnUVhCd2JHVlhaV0pMYVhRdk5UTTNMak0ySUNoTFNGUk5UQ3dnYkdsclpTQkhaV05yYnlrZ1EyaHliMjFsTHpFd055NHdMakF1TUNCVFlXWmhjbWt2TlRNM0xqTTJJaXdpWW5KdmQzTmxjbDkyWlhKemFXOXVJam9pTVRBM0xqQXVNQzR3SWl3aWIzTmZkbVZ5YzJsdmJpSTZJakV3SWl3aWNtVm1aWEp5WlhJaU9pSWlMQ0p5WldabGNuSnBibWRmWkc5dFlXbHVJam9pSWl3aWNtVm1aWEp5WlhKZlkzVnljbVZ1ZENJNklpSXNJbkpsWm1WeWNtbHVaMTlrYjIxaGFXNWZZM1Z5Y21WdWRDSTZJaUlzSW5KbGNHVmhjMlZmWTJoaGJtNWxjQ0k2SW5OMFlXSnNaU0lzSW1Oc2FXVnVkRjlpZFdsc1pGOXVkVzFpWlhJaU9qRTFORGMxTUN3aVkyeHBaVzUwWDJWMlpXNTBYM052ZFhKalpTSTZiblZzYkgwPSIsCiAgICAgICAgICAgIH0KICAgIGpzb25kYXRhID0gewogICAgICAgICJ1c2VybmFtZSI6IHVzZXJuYW1lCiAgICB9CiAgICB0cnk6CiAgICAgICAgcmVxID0gc2Vzc2lvbi5wb3N0KHVybCwgaGVhZGVycz1oZWFkZXJzLCBqc29uPWpzb25kYXRhLCBwcm94eT17CiAgICAgICAgICAgICAgICAiaHR0cCI6ICJodHRwOi8vIiArIHJhbmRvbS5jaG9pY2UocHJveGllcyksCiAgICAgICAgICAgICAgICAiaHR0cHMiOiAiaHR0cDovLyIgKyByYW5kb20uY2hvaWNlKHByb3hpZXMpLAogICAgICAgICAgICB9KQogICAgZXhjZXB0OgogICAgICAgIHJldHVybgogICAgaWYgcmVxLnN0YXR1c19jb2RlID09IDIwMDoKICAgICAgICBzdGF0cy5jaGVja2VkICs9IDEKICAgICAgICBjaGVja3Rha2VuID0gcmVxLmpzb24oKVsndGFrZW4nXQogICAgICAgIGlmIGNoZWNrdGFrZW4gPT0gVHJ1ZToKICAgICAgICAgICAgcHJpbnQoZiIge0JhY2suTElHSFRSRURfRVh9ICDinJUgIHtCYWNrLlJFU0VUfSB7Rm9yZS5XSElURX1Vc2VybmFtZSBUYWtlbiAtIHt1c2VybmFtZX0iKQogICAgICAgICAgICBzdGF0cy50YWtlbiArPSAxCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc3RhdHMuc25pcGVkICs9IDEKICAgICAgICAgICAgcHJpbnQoZiIge0JhY2suTElHSFRHUkVFTl9FWH0gIOKckyAge0JhY2suUkVTRVR9IHtGb3JlLldISVRFfVVzZXJuYW1lIFNuaXBlZCAtIHt1c2VybmFtZX0iKQogICAgICAgICAgICB3aXRoIG9wZW4oIm91dHB1dC50eHQiLCAiYSIpIGFzIGY6CiAgICAgICAgICAgICAgICBmLndyaXRlKGYie3VzZXJuYW1lfVxuIikKCmRlZiBnZW5lcmF0ZVVzZXJuYW1lKCk6CiAgICBpZiBVU0VSTkFNRV9HRU5FUkFUSU9OX01FVEhPRCA9PSAiRElDVElPTkFSWSI6CiAgICAgICAgcmVzcG9uc2UgPSBzZXNzaW9uLmdldChESUNUSU9OQVJZX0FQSSkKICAgICAgICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICAgICAgICAgIGRhdGEgPSByZXNwb25zZS5qc29uKCkKICAgICAgICAgICAgaWYgbGVuKGRhdGEpID4gMDoKICAgICAgICAgICAgICAgIHdvcmQgPSBkYXRhWzBdCiAgICAgICAgICAgICAgICByZXR1cm4gd29yZAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgY2hhcmFjdGVycyA9IHN0cmluZy5hc2NpaV9sZXR0ZXJzICsgc3RyaW5nLmRpZ2l0cwogICAgICAgICAgICAgICAgcmV0dXJuICcnLmpvaW4ocmFuZG9tLmNob2ljZShjaGFyYWN0ZXJzKSBmb3IgXyBpbiByYW5nZShSQU5ET01fTUVUSE9EX0xFTkdUSCkpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgY2hhcmFjdGVycyA9IHN0cmluZy5hc2NpaV9sZXR0ZXJzICsgc3RyaW5nLmRpZ2l0cwogICAgICAgICAgICByZXR1cm4gJycuam9pbihyYW5kb20uY2hvaWNlKGNoYXJhY3RlcnMpIGZvciBfIGluIHJhbmdlKFJBTkRPTV9NRVRIT0RfTEVOR1RIKSkKCiAgICBlbGlmIFVTRVJOQU1FX0dFTkVSQVRJT05fTUVUSE9EID09ICJSQU5ET00iOgogICAgICAgIGlmIFJBTkRPTV9NRVRIT0RfV0hBVFVTRSA9PSAiQUxMIjoKICAgICAgICAgICAgY2hhcmFjdGVycyA9IHN0cmluZy5hc2NpaV9sZXR0ZXJzICsgc3RyaW5nLmRpZ2l0cwogICAgICAgIGVsaWYgUkFORE9NX01FVEhPRF9XSEFUVVNFID09ICJTVFJJTkciOgogICAgICAgICAgICBjaGFyYWN0ZXJzID0gc3RyaW5nLmFzY2lpX2xldHRlcnMKICAgICAgICBlbGlmIFJBTkRPTV9NRVRIT0RfV0hBVFVTRSA9PSAiTlVNQkVSIjoKICAgICAgICAgICAgY2hhcmFjdGVycyA9IHN0cmluZy5kaWdpdHMKICAgICAgICBlbHNlOgogICAgICAgICAgICBjaGFyYWN0ZXJzID0gc3RyaW5nLmFzY2lpX2xldHRlcnMgKyBzdHJpbmcuZGlnaXRzCiAgICAgICAgcmV0dXJuICcnLmpvaW4ocmFuZG9tLmNob2ljZShjaGFyYWN0ZXJzKSBmb3IgXyBpbiByYW5nZShSQU5ET01fTUVUSE9EX0xFTkdUSCkpCiAgICBlbHNlOgogICAgICAgIHByaW50KCJJbnZhbGlkIG1ldGhvZC4uLi4iKQogICAgICAgIHByaW50KGYie0ZvcmUuV0hJVEV9UHJlc3MgYW55IGtleS4uLiIpCiAgICAgICAgb3Muc3lzdGVtKCJwYXVzZSA+IE5VTCIpCiAgICAgICAgZXhpdCgxKQoKZGVmIGxvb3BUaHJlYWQoKToKICAgIHdoaWxlIFRydWU6CiAgICAgICAgY2hlY2tVc2VybmFtZSgpCiAgICAgICAgCnByaW50KGZhZGUucGlua3JlZChmIiIiCiBfX18gIF9fICBfXyAgICBfXyAgICBfX19fICBfX19fICBfX19fIAovIF9fKSggIFwvICApICAvX19cICAoICBfIFwoXyAgXykoXyAgXykKXF9fIFwgKSAgICAoICAvKF9fKVwgICkgICAvICApKCAgIF8pKF8gCihfX18vKF8vXC9cXykoX18pKF9fKShfKVxfKSAoX18pIChfX19fKSAgICAgICAgICAgICAgICAgICAKIiIiKSkKcHJpbnQoZiJ7QmFjay5XSElURX17Rm9yZS5CTEFDS30gQ3JlYXRlZCBieSB7Rm9yZS5MSUdIVFJFRF9FWH1pZy5zbWFydGkge0ZvcmUuQkxBQ0t9IHtCYWNrLlJFU0VUfSIpCnByaW50KGYie0JhY2suV0hJVEV9e0ZvcmUuQkxBQ0t9IGRpc2NvcmQuZ2cvZHJvbnRvcCB7QmFjay5SRVNFVH0iKQp0aHJlYWRzc3RhcnRlZCA9IFtdCmZvciBfIGluIHJhbmdlKFRIUkVBRFMpOgogICAgdGhyZWFkID0gdGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9bG9vcFRocmVhZCkKICAgIHRocmVhZHNzdGFydGVkLmFwcGVuZCh0aHJlYWQpCiAgICB0aHJlYWQuc3RhcnQoKQpmb3IgdGggaW4gdGhyZWFkc3N0YXJ0ZWQ6CiAgICB0aC5qb2luKCkKCnByaW50KGYie0ZvcmUuV0hJVEV9UHJlc3MgYW55IGtleS4uLiIpCm9zLnN5c3RlbSgicGF1c2UgPiBOVUwiKQpleGl0KDEpCg=='))